{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","formData","text","title","author","field","value","this","setState","result","e","preventDefault","bodyFormData","FormData","key","append","axios","put","then","res","data","outcome","className","onSubmit","check","type","rows","onChange","updateField","target","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAuFeA,G,wDAlFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,CACRC,KAAM,GACNC,MAAO,GACPC,OAAQ,KANK,E,wDAWPC,EAAOC,GAAQ,IACjBL,EAAaM,KAAKR,MAAlBE,SACRM,KAAKC,SAAS,CACZP,SAAS,2BACJA,GADG,kBAELI,EAAQC,IAEXG,OAAQ,S,4BAINC,GAAI,IAAD,OACPA,EAAEC,iBACF,IAAMC,EAAe,IAAIC,SACzB,IAAK,IAAIC,KAAOP,KAAKP,MAAMC,SACrBM,KAAKP,MAAMc,IACbF,EAAaG,OAAOD,EAAKP,KAAKP,MAAMc,IAGxCP,KAAKC,SAAS,CACZC,OAAQ,SAEVO,IACGC,IAAI,WAAYL,GAChBM,MAAK,SAAAC,GACJ,EAAKX,SAAS,CACZC,OAAQU,EAAIC,KAAKC,e,+BAKf,IAAD,OACCZ,EAAWF,KAAKP,MAAhBS,OACR,OACE,qBAAKa,UAAU,MAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,8CACA,mJACA,0QACA,uBAAMA,UAAU,OAAOC,SAAU,SAACb,GAAD,OAAO,EAAKc,MAAMd,IAAnD,UACE,uBAAOY,UAAU,QAAjB,kBACA,0BACEG,KAAK,OACLC,KAAK,KACLJ,UAAU,aACVK,SAAU,SAACjB,GAAD,OAAO,EAAKkB,YAAY,OAAQlB,EAAEmB,OAAOvB,UAErD,uBAAOgB,UAAU,QAAjB,8BACA,uBACEG,KAAK,OACLH,UAAU,cACVK,SAAU,SAACjB,GAAD,OAAO,EAAKkB,YAAY,QAASlB,EAAEmB,OAAOvB,UAEtD,uBAAOgB,UAAU,QAAjB,+BACA,uBACEG,KAAK,SACLH,UAAU,eACVK,SAAU,SAACjB,GAAD,OAAO,EAAKkB,YAAY,SAAUlB,EAAEmB,OAAOvB,UAEvD,wBAAQmB,KAAK,SAASK,QAAS,SAACpB,GAAD,OAAO,EAAKc,MAAMd,IAAjD,yBAEDD,GAAW,sBAAKa,UAAU,cAAf,UACV,mBAAGA,UAAU,eAAb,qBACA,mBAAGA,UAAU,SAAb,SAAuBb,gB,GA3EjBsB,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.469ec75b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      formData: {\n        text: '',\n        title: '',\n        author: ''\n      }\n    }\n  }\n\n  updateField(field, value) {\n    const { formData } = this.props\n    this.setState({\n      formData: {\n        ...formData,\n        [field]: value\n      },\n      result: null\n    })\n  }\n\n  check(e) {\n    e.preventDefault()\n    const bodyFormData = new FormData()\n    for (let key in this.state.formData) {\n      if (this.state[key]) {\n        bodyFormData.append(key, this.state[key])\n      }\n    }\n    this.setState({\n      result: 'Fake'\n    })\n    axios\n      .put('/running', bodyFormData)\n      .then(res => {\n        this.setState({\n          result: res.data.outcome\n        })\n      })\n  }\n\n  render() {\n    const { result } = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"app-inner-wrap\">\n          <h1>Fake or not?</h1>\n          <p>Paste in the text of an article, and we'll run it through a predictive model to see whether it is reliable or not.</p>\n          <p>Note: this is meant to be a fun, easy way to view the results of a predictive model, not an authoritative reliability checker. In fact, try to find topics/phrases that would trigger a \"Fake news!\" response even with a reliable input.</p>\n          <form className=\"form\" onSubmit={(e) => this.check(e)}>\n            <label className=\"label\">Text</label>\n            <textarea\n              type=\"text\"\n              rows=\"10\"\n              className=\"input-text\"\n              onChange={(e) => this.updateField('text', e.target.value)}\n            />\n            <label className=\"label\">Title (optional)</label>\n            <input\n              type=\"text\"\n              className=\"input-title\"\n              onChange={(e) => this.updateField('title', e.target.value)}\n            />\n            <label className=\"label\">Author (optional)</label>\n            <input\n              type=\"author\"\n              className=\"input-author\"\n              onChange={(e) => this.updateField('author', e.target.value)}\n            />\n            <button type=\"submit\" onClick={(e) => this.check(e)}>Run now!</button>\n          </form>\n          {result && (<div className=\"result-wrap\">\n            <p className=\"result-label\">Result:</p>\n            <p className=\"result\">{result}</p>\n          </div>)}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}